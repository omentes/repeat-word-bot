<?php

declare(strict_types=1);

namespace RepeatBot\Bot;

use RepeatBot\Core\Database\Model\Collection;

class BotHelper
{
    /**
     * @return array
     */
    public static function getDefaultKeyboard(): array
    {
        return [
            ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–°–ø—Ä–∞–≤–∫–∞'],
            ['–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',],
        ];
    }

    /**
     * @return array
     */
    public static function getInTrainingKeyboard(): array
    {
        return [
            ['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', '–Ø –Ω–µ –∑–Ω–∞—é'],
        ];
    }

    /**
     * @return array
     */
    public static function getTrainingKeyboard(): array
    {
        return [
            ['–ù–∞–∑–∞–¥', '–ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–ª–æ–≤', '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', ],
            ['To English', 'From English'],
        ];
    }

    /**
     * @return string[]
     */
    public static function getCommands(): array
    {
        return [
            '–ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–ª–æ–≤' => 'Collections',
            '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å' => 'MyVocabulary',
            'From English' => 'VoiceEnglish',
            'FromEnglish' => 'VoiceEnglish',
            'To English' => 'VoiceEnglish',
            'ToEnglish' => 'VoiceEnglish',
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' => 'Settings',
            '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' => 'StartTraining',
            '–°–ø—Ä–∞–≤–∫–∞' => 'Help',
            '–ù–∞–∑–∞–¥' => 'Start',
        ];
    }

    /**
     * @param array $records
     *
     * @return array
     */
    public static function convertCollectionToButton(array $records): array
    {
        $result = $tmp = [];

        /** @var Collection $record */
        foreach ($records as $it => $record) {
            if ((int) $it % 2 == 0) {
                if (!empty($tmp)) {
                    $result[] = $tmp;
                }
                $tmp = [];
                $tmp[] = [
                    'text' => "{$record->getName()}",
                    'callback_data' => "collection_{$record->getId()}"
                ];
            } else {
                $tmp[] = [
                    'text' => "{$record->getName()}",
                    'callback_data' => "collection_{$record->getId()}"
                ];
            }
        }
        if (!empty($tmp)) {
            $result[] = $tmp;
        }

        return $result;
    }

    /**
     * @return string[]
     */
    public static function getTrainingTypes(): array
    {
        return [
            'FromEnglish',
            'ToEnglish',
        ];
    }

    /**
     * @param string $text
     * @param int    $switch
     *
     * @return array
     */
    public static function getSettingsKeyboard(string $text, int $switch): array
    {
        return [
            ['text' => $text, 'callback_data' => "settings_silent_{$switch}"],
        ];
    }

    /**
     * @return string
     */
    public static function getCollectionText(): string
    {
        $text = "–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å. –°–ª–æ–≤–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.\n\n";
        $text .= "–í—Å–µ —Å–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞ –≤ —è–∑—ã–∫–µ. ";
        $text .= "–ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å—Ä–∞–∑—É —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –¥–æ–ª–≥–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. ";
        $text .= "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –æ–±–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (From English + To English). ";
        $text .= "–¢–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞, –µ—Å–ª–∏ –≤—ã –ø–æ –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n\n";
        $text .= "–ö–∞–∂–¥–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞! –°–ª–æ–≤–∞ –ù–ï –ü–û–í–¢–û–†–Ø–Æ–¢–°–Ø. –í–∞—Å –∂–¥–µ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ 17814 —Å–ª–æ–≤! ";
        $text .= "–ü–µ—Ä–≤—ã–µ 11 –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ 1500 —Å–ª–æ–≤ –∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π 1314 —Å–ª–æ–≤";

        return $text;
    }

    /**
     * @param string $text
     * @param int    $count
     *
     * @return string
     */
    public static function getAnswer(string $text, int $count): string
    {
        $module = $count > 10 && $count < 15 ? ($count + 5) % 10 : $count % 10;
        $word = match($module) {
            1 => '—Å–ª–æ–≤–æ',
            2, 3, 4, => '—Å–ª–æ–≤–∞',
            5, 6, 7, 8, 9, 0 => '—Å–ª–æ–≤',
        };
        $text .= "{$count} {$word}";

        return $text;
    }

    /**
     * @param int  $collectionNum
     * @param bool $exist
     *
     * @return array
     */
    public static function getCollectionPagination(int $collectionNum, bool $exist): array
    {
        $result[] = BotHelper::getPagination($collectionNum);
        $addRemove = $exist ?
            [
                'text' => "üö´ –£–¥–∞–ª–∏—Ç—å",
                'callback_data' => 'ratings_del_' . $collectionNum
            ] :
            [
                'text' => "‚úÖ –î–æ–±–∞–≤–∏—Ç—å",
                'callback_data' => 'ratings_add_' . $collectionNum,
            ];
        $progress = $exist ?
            [
                'text' => "üîÑ –°–±—Ä–æ—Å–∏—Ç—å",
                'callback_data' => 'ratings_reset_' . $collectionNum,
            ] :
            [
                'text' => " ",
                'callback_data' => 'empty'
            ];
        $result[] = [
            $progress,
            $addRemove,
        ];
        return $result;
    }

    /**
     * @param int $num
     *
     * @return \string[][]
     */
    private static function getPagination(int $num): array
    {
        $emoji = BotHelper::createEmojiNumber($num);
        return [
            [
                'text' => $num > 1 ? '   ‚è™   ' : '        ',
                'callback_data' => $num > 1 ? 'rating_' . ($num - 1) : 'empty',
            ],
            [
                'text' => "   {$emoji}   ",
                'callback_data' => 'empty',
            ],
            [
                'text' => $num < 12 ? '   ‚è©   ' : '        ',
                'callback_data' => $num < 12 ? 'rating_' . ($num + 1) : 'empty',
            ],
        ];
    }

    private static function createEmojiNumber(int $num, string $text = '')
    {
        $m = $num;
        if ($m >= 10) {
            $text .= BotHelper::createEmojiNumber(intval($m / 10));
            $m -= 10;
        }
        if ($m < 10) {
            $text .= match($m) {
                0 => '0Ô∏è‚É£',
                1 => '1Ô∏è‚É£',
                2 => '2Ô∏è‚É£',
                3 => '3Ô∏è‚É£',
                4 => '4Ô∏è‚É£',
                5 => '5Ô∏è‚É£',
                6 => '6Ô∏è‚É£',
                7 => '7Ô∏è‚É£',
                8 => '8Ô∏è‚É£',
                9 => '9Ô∏è‚É£',
            };
        }
        return $text;
    }
}
