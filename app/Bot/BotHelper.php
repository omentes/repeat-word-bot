<?php

declare(strict_types=1);

namespace RepeatBot\Bot;

use JetBrains\PhpStorm\ArrayShape;
use Longman\TelegramBot\Entities\InlineKeyboard;

class BotHelper
{
    protected const VOICES = [
        ['text' => 'en-US-Wavenet-A'],
        ['text' => 'en-US-Wavenet-B'],
        ['text' => 'en-US-Wavenet-C'],
        ['text' => 'en-US-Wavenet-D'],
        ['text' => 'en-US-Wavenet-E'],
        ['text' => 'en-US-Wavenet-F'],
        ['text' => 'en-US-Wavenet-G'],
        ['text' => 'en-US-Wavenet-H'],
        ['text' => 'en-US-Wavenet-I'],
        ['text' => 'en-US-Wavenet-J'],
    ];

    /**
     * @return array
     */
    public static function getVoices(): array
    {
        return array_column(self::VOICES, 'text');
    }

    /**
     * @return \string[][]
     */
    public static function getDefaultKeyboard(): array
    {
        return [
            ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–°–ø—Ä–∞–≤–∫–∞'],
            ['–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',],
        ];
    }

    public static function getInTrainingKeyboard(): array
    {
        return [
            ['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', '–Ø –Ω–µ –∑–Ω–∞—é'],
        ];
    }

    /**
     * @return \string[][]
     */
    public static function getTrainingKeyboard(): array
    {
        return [
            ['–ù–∞–∑–∞–¥', '–ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–ª–æ–≤', '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å',],
            ['To English', 'From English'],
        ];
    }

    /**
     * @return string[]
     */
    public static function getCommands(): array
    {
        return [
            '–ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–ª–æ–≤' => 'collections',
            '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å' => 'progress',
            'From English' => 'translate_training',
            'To English' => 'translate_training',
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' => 'settings',
            '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' => 'training',
            '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' => 'training',
            '–Ø –Ω–µ –∑–Ω–∞—é' => 'training',
            '–°–ø—Ä–∞–≤–∫–∞' => 'help',
            '–ù–∞–∑–∞–¥' => 'start',
        ];
    }

    /**
     * @return string[]
     */
    public static function getTrainingTypes(): array
    {
        return [
            'FromEnglish',
            'ToEnglish',
        ];
    }

    /**
     * @param string $textSilent
     * @param string $textPriority
     * @param string $textVoices
     * @param int    $silent
     * @param int    $priority
     *
     * @return \string[][][]
     */
    public static function getSettingsKeyboard(
        string $textSilent,
        string $textPriority,
        string $textVoices,
        int $silent,
        int $priority
    ): array {
        return [
            [
                ['text' => $textSilent, 'callback_data' => "settings_silent_{$silent}"],
            ],
            [
                ['text' => $textPriority, 'callback_data' => "settings_priority_{$priority}"],
            ],
            [
                ['text' => $textVoices, 'callback_data' => "settings_voices_start"],
            ]
        ];
    }

    /**
     * @param array $switchers
     *
     * @return array
     */
    public static function getSettingsVoicesKeyboard(array $switchers): array
    {
        $result = [];

        foreach (self::VOICES as $it => $value) {
            $key =  self::VOICES[$it]['text'];
            $switcher = $switchers[$key] == 1 ? '‚úÖ' : '‚ùå';
            $switcherNum = $switchers[$key] == 1 ? 0 : 1;
            $voiceName = str_replace('-', ' ', str_replace('en-US-', '', $key));
            $result[] = [
                [
                    'text' => "{$voiceName} {$switcher}",
                    'callback_data' => "settings_voices_{$it}_{$switcherNum}"
                ],
                [
                    'text' => '–ü—Ä–∏–º–µ—Ä',
                    'callback_data' => "settings_voices_example_{$it}"
                ],
            ];
        }

        $result[] = [
            ['text' => '–ù–∞–∑–∞–¥', 'callback_data' => "settings_voices_back"],
        ];

        return $result;
    }

    /**
     * @return string
     */
    public static function getCollectionText(): string
    {
        $text = "–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å. –°–ª–æ–≤–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.\n\n";
        $text .= "–í—Å–µ —Å–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ `–ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è` —Å–ª–æ–≤–∞ –≤ —è–∑—ã–∫–µ. ";
        $text .= "–ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å—Ä–∞–∑—É —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –¥–æ–ª–≥–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. ";
        $text .= "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –æ–±–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (`From English` + `To English`). ";
        $text .= "–¢–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞, –µ—Å–ª–∏ –≤—ã –ø–æ –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n\n";
        $text .= "–ö–∞–∂–¥–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞! –°–ª–æ–≤–∞ `–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è`. –í–∞—Å –∂–¥–µ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ 17814 —Å–ª–æ–≤! ";
        $text .= "–ü–µ—Ä–≤—ã–µ 35 –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ 500 —Å–ª–æ–≤ –∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π 314 —Å–ª–æ–≤\n\n";
        $text .= "–°–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–æ 500 —à—Ç—É–∫, –ø–æ—ç—Ç–æ–º—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ `–î–æ–±–∞–≤–∏—Ç—å` –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n\n";
        $text .= "–õ–∏—Å—Ç–∞—è –≤–ª–µ–≤–æ –∏ –≤–ø—Ä–∞–≤–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—Ä–∏–º–µ—Ä–æ–≤ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è —Å–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º\n\n";
        $text .= "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ `–£–¥–∞–ª–∏—Ç—å` –∏ `–°–±—Ä–æ—Å–∏—Ç—å`, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∂—É—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –¥–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏";

        return $text;
    }

    /**
     * @param string $text
     * @param int    $count
     *
     * @return string
     */
    public static function getAnswer(string $text, int $count): string
    {
        $module = $count > 10 && $count < 15 ? ($count + 5) % 10 : $count % 10;
        $word = match($module) {
            5, 6, 7, 8, 9, 0 => '—Å–ª–æ–≤',
            2, 3, 4, => '—Å–ª–æ–≤–∞',
            1 => '—Å–ª–æ–≤–æ',
        };
        $text .= strtr(':count :word', [
            ':count' => $count,
            ':word' => $word,
        ]);

        return $text;
    }

    /**
     * @param int  $collectionNum
     * @param bool $exist
     *
     * @return array
     */
    public static function getCollectionPagination(int $collectionNum, bool $exist): array
    {
        $result = [];
        $result[] = BotHelper::getPaginationFw($collectionNum);
        $result[] = BotHelper::getPaginationNums($collectionNum);
        $addRemove = $exist ?
            [
                'text' => "üö´ –£–¥–∞–ª–∏—Ç—å",
                'callback_data' => 'collections_del_' . $collectionNum,
            ] :
            [
                'text' => "‚úÖ –î–æ–±–∞–≤–∏—Ç—å",
                'callback_data' => 'collections_add_' . $collectionNum,
            ];
        $progress = $exist ?
            [
                'text' => "üîÑ –°–±—Ä–æ—Å–∏—Ç—å",
                'callback_data' => 'collections_reset_' . $collectionNum,
            ] :
            [
                'text' => " ",
                'callback_data' => 'empty',
            ];

        $result[] = [
            $progress,
            $addRemove,
        ];

        return $result;
    }

    /**
     * @param int $num
     *
     * @return \string[][]
     */
    private static function getPaginationNums(int $num): array
    {
        return [
            [
                'text' => $num > 1 ? '   ‚èÆ   ' : '        ',
                'callback_data' => $num > 1 ? 'collections_' . 1 : 'empty',
            ],
            [
                'text' => $num > 1 ? '   ‚è™   ' : '        ',
                'callback_data' => $num > 1 ? 'collections_' . ($num - 1) : 'empty',
            ],
            [
                'text' => $num < 36 ? '   ‚è©   ' : '        ',
                'callback_data' => $num < 36 ? 'collections_' . ($num + 1) : 'empty',
            ],
            [
                'text' => $num < 36 ? '   ‚è≠   ' : '        ',
                'callback_data' => $num < 36 ? 'collections_' . 36 : 'empty',
            ],
        ];
    }

    /**
     * @param int $num
     *
     * @return array[]
     */
    private static function getPaginationFw(int $num): array
    {
        return [
            [
                'text' => $num > 1 ? BotHelper::createEmojiNumber($num - 1) : ' ',
                'callback_data' => $num > 1 ? 'collections_' . ($num - 1) : 'empty',
            ],
            [
                'text' => BotHelper::createEmojiNumber($num),
                'callback_data' => 'collections_' . $num,
            ],
            [
                'text' => $num < 36 ? BotHelper::createEmojiNumber($num + 1) : ' ',
                'callback_data' => $num < 36 ? 'collections_' . ($num + 1) : 'empty',
            ],
        ];
    }

    /**
     * @param int    $num
     * @param string $text
     *
     * @return string
     */
    private static function createEmojiNumber(int $num, string $text = ''): string
    {
        $tmp = $num;
        if ($tmp >= 10) {
            $text .= BotHelper::createEmojiNumber(intval($tmp / 10));
            $text .= BotHelper::createEmojiNumber(intval($tmp % 10));
        }
        if ($tmp < 10) {
            $text .= match($tmp) {
                0 => '0Ô∏è‚É£',
                1 => '1Ô∏è‚É£',
                2 => '2Ô∏è‚É£',
                3 => '3Ô∏è‚É£',
                4 => '4Ô∏è‚É£',
                5 => '5Ô∏è‚É£',
                6 => '6Ô∏è‚É£',
                7 => '7Ô∏è‚É£',
                8 => '8Ô∏è‚É£',
                9 => '9Ô∏è‚É£',
            };
        }

        return $text;
    }

    /**
     * @param int $silent
     * @param int $priority
     * @param int $user_id
     * @param int $message_id
     *
     * @return array
     */
    public static function editMainMenuSettings(int $silent, int $priority, int $user_id, int $message_id): array
    {
        $symbolSilent = $silent === 1 ? '‚úÖ' : '‚ùå';
        $symbolPriority = $priority === 1 ? '‚úÖ' : '‚ùå';
        $textSilent = "–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —Å–æ–æ–±—â–µ–Ω–∏–π: {$symbolSilent}";
        $texPriority = "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ–Ω—å—à–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏: {$symbolPriority}";
        $texVoices = "–í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫";
        /** @psalm-suppress TooManyArguments */
        $keyboard = new InlineKeyboard(...BotHelper::getSettingsKeyboard(
            $textSilent,
            $texPriority,
            $texVoices,
            $silent === 1 ? 0 : 1,
            $priority === 1 ? 0 : 1,
        ));
        return [
            'chat_id' => $user_id,
            'text' => BotHelper::getSettingsText(),
            'reply_markup' => $keyboard,
            'message_id' => $message_id,
            'parse_mode' => 'markdown',
        ];
    }

    /**
     * @return string
     */
    public static function getSettingsText(): string
    {
        return "`–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —Å–æ–æ–±—â–µ–Ω–∏–π`:\n" .
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö. –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É" .
        " *–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n" .
        "`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ–Ω—å—à–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π`:\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –≤—ã–∫–ª—é—á–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–ª–æ–≤ —Å —Ä–∞–∑–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π, –∏ –æ–Ω–∏ " .
        "–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ –ø–æ—Ä—è–¥–∫–µ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–ª–æ–≤–∞ —Å –º–µ–Ω—å—à–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π, —Ç–æ " .
        "–≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ–∂–∏–º –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É " .
        " *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ–Ω—å—à–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π*\n\n" .
        "`–ì–æ–ª–æ—Å–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫`:\n" .
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –æ–¥–∏–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–æ–ª–æ—Å en-US-Wavenet-A. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–û–ª—å—à–µ–≥–æ " .
        "–æ–ø—ã—Ç–∞ –≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –¥–æ 9 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤, –æ–¥–∏–Ω " .
        "–∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö";
    }

    /**
     * @return array
     */
    public static function getTimeZones(): array
    {
        return include_once __DIR__ . '/../../config/timezones.php';
    }

    /**
     * @param string|null $input
     *
     * @return string
     */
    public static function getTextFromInput(?string $input): string
    {
        return null === $input ? '' : $input;
    }
}
